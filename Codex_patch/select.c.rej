--- fs/select.c
+++ fs/select.c
@@ -25,6 +25,12 @@
 #include <linux/fs.h>
 #include <linux/rcupdate.h>
 #include <linux/hrtimer.h>
+#ifdef CONFIG_KRG_FAF
+#include <kerrighed/faf.h>
+#endif
+#ifdef CONFIG_KRG_EPM
+#include <kerrighed/krgsyms.h>
+#endif
 
 #include <asm/uaccess.h>
 
@@ -226,13 +257,33 @@
 	struct poll_wqueues *pwq = container_of(p, struct poll_wqueues, pt);
 	struct poll_table_entry *entry = poll_get_entry(pwq);
 	if (!entry)
+#ifndef CONFIG_KRG_FAF
 		return;
+#else
+	        goto check_faf;
+#endif
 	get_file(filp);
 	entry->filp = filp;
 	entry->wait_address = wait_address;
 	init_waitqueue_func_entry(&entry->wait, pollwake);
 	entry->wait.private = pwq;
 	add_wait_queue(wait_address, &entry->wait);
+#ifdef CONFIG_KRG_FAF
+check_faf:
+	if (filp->f_flags & O_FAF_CLT) {
+		if (krg_faf_poll_wait(filp, entry != NULL)) {
+			if (entry) {
+				/*
+				 * Don't call free_poll_entry() since it would
+				 * call krg_faf_poll_dequeue().
+				 */
+				remove_wait_queue(wait_address, &entry->wait);
+				fput(filp);
+				poll_put_entry(p, entry);
+			}
+		}
+	}
+#endif
 }
 
 int poll_schedule_timeout(struct poll_wqueues *pwq, int state,
